#!/bin/bash
# Usage: szerk [any number of strings]; szerk -p [any number of strings] to use pdflatex instead of latex then dvips.
# opens and edits all files (of types below) that have any of the strings in their names, then copies them back to their original locations.
# for latex files: an auxiliary file is created (and not saved!!!) if %szerkbodystart and %szerkbodyend are found as separate lines. Good for editing slides (don't need to compile everything every time).
# notice: mybr is a script in your path for launching your favourite browser. Could as well replace by e.g. "firefox" or "chromium-browser".

# for j in "$@"
# do
#  for i in *$j*
#  do
#   firstfile=i
#   break
#  done
#  break
# done

#legelej=${i%.*}
#k=s3$legelej`date +%N`
#k=s3$legelej`date +%y%m%d_%H%M%S`_`strings /dev/urandom | tr -dc a-z-0-9 | tr -d - | head -c5`

# Process -p option
while getopts p opcio
do
 case "$opcio" in
  p) pdflatex="1"
 esac
done

if [[ "$pdflatex" == 1 ]]
then
 tocut="$@"	#Since $@ is special in Bash parameter expansion
 filelist="${tocut#* }"	#Cut until the first space (i.e., the parameter -p)
else
 filelist="$@"
fi
# echo "$filelist"
# read -n1 -s
 
# Work directory (for example, $HOME/tmp or /tmp):
wkdir="$HOME/a"

k=s3`date +%y%m%d_%H%M%S`_`strings /dev/urandom | tr -dc a-z-0-9 | tr -d - | head -c5`
mkdir $wkdir/$k
chmod 700 $wkdir/$k/

viml=""
emacsl=""
ffl=""
ool=""
files=""
libofpid=""

for j in "$filelist"
do

 for i in *$j*
 do
 
  if [ ! -f "$i" ]
  then
   continue
  fi

  if [ ! -w "$i" ]
  then
   read -p "$i non-writable, [Enter]"
   continue
  fi

  if [ -f ".szerklock_$i" ]
  then
   echo Found ".szerklock_$i, skipping $i"
   continue
  fi

 # Bash parameter expansion
   veg=${i##*.}
   elej=${i%.*}
  
 #echo "$veg"
 #echo "$elej"
  
 #### doc, docx, rtf, ods, odt, xls, xlsx, xlsm, ppt, pptx, pps
  
  if [[ "$veg" == "doc" ]] || [[ "$veg" == "docx" ]] || [[ "$veg" == "rtf" ]] || [[ "$veg" == "ods" ]] || [[ "$veg" == "odt" ]] || [[ "$veg" == "xls" ]] || [[ "$veg" == "xlsx" ]] || [[ "$veg" == "xlsm" ]] || [[ "$veg" == "ppt" ]] || [[ "$veg" == "pptx" ]] || [[ "$veg" == "pps" ]]
  then
   cp "$i" $wkdir/$k
   catthatfile "$wkdir/$k" "$i" &
   cd $wkdir/$k
 
   ool="$i $ool"
   files="$i $files"
 
   cd -

   if [ -f ".szerklock_$i" ]
   then
    echo Found ".szerklock_$i, skipping $i"
    continue
   else
    touch ".szerklock_$i"
   fi
  fi 
  
 #### htm, html, wml
  
  if [[ "$veg" == "htm" ]] || [[ "$veg" == "html" ]] || [[ "$veg" == "wml" ]]
  then
   cp "$i" $wkdir/$k
   catthatfile "$wkdir/$k" "$i" &
   cd $wkdir/$k
 
   viml="$i $viml"
   ffl="$i $ffl"
   files="$i $files"
 
   cd -

   if [ -f ".szerklock_$i" ]
   then
    echo Found ".szerklock_$i, skipping $i"
    continue
   else
    touch ".szerklock_$i"
   fi
  fi
  
 #### lev, txt, php, sql, csv, css, bib, sty, org
  
  if [[ "$veg" == "rnd" ]] || [[ "$veg" == "lev" ]] || [[ "$veg" == "m" ]] || [[ "$veg" == "txt" ]] || [[ "$veg" == "php" ]] || [[ "$veg" == "sql" ]] || [[ "$i" != *.* ]] || [[ "$veg" == "csv" ]] || [[ "$veg" == "css" ]] || [[ "$veg" == "bib" ]] || [[ "$veg" == "sty" ]] || [[ "$veg" == "org" ]]
  then
   cp "$i" $wkdir/$k
   catthatfile "$wkdir/$k" "$i" &
   cd $wkdir/$k
 
   viml="$i $viml"
   files="$i $files"
 
   cd -

   if [ -f ".szerklock_$i" ]
   then
    echo Found ".szerklock_$i, skipping $i"
    continue
   else
    touch ".szerklock_$i"
   fi
  fi
  
# #### org
#  
#  if [[ "$veg" == "org" ]]
#  then
#   cp "$i" $wkdir/$k
#   catthatfile "$wkdir/$k" "$i" &
#   cd $wkdir/$k
# 
#   emacsl="$i $emacsl"
#   files="$i $files"
# 
#   cd -
#
#   if [ -f ".szerklock_$i" ]
#   then
#    echo Found ".szerklock_$i, skipping $i"
#    continue
#   else
#    touch ".szerklock_$i"
#   fi
#  fi
  
 #### xopp
  
  if [[ "$veg" == "xopp" ]]
  then
   cp "$i" $wkdir/$k
   catthatfile "$wkdir/$k" "$i" &

   cp *.pdf $wkdir/$k
   if [ "$?" == 0 ]
   then
    files="*.pdf $files"
   fi
   cd $wkdir/$k
   xournalpp "$i"
   files="$i $files"
   
   cd -

   if [ -f ".szerklock_$i" ]
   then
    echo Found ".szerklock_$i, skipping $i"
    continue
   else
    touch ".szerklock_$i"
   fi
  fi
 #### tex, ltx
  
  if [[ "$veg" == "tex" ]] || [[ "$veg" == "ltx" ]]
  then
   cp "$i" $wkdir/$k
   catthatfile "$wkdir/$k" "$i" &
   cp *.bib $wkdir/$k
   if [ "$?" == 0 ]
   then
    files="*.bib $files"
   fi
   cp *.pdf $wkdir/$k
   if [ "$?" == 0 ]
   then
    files="*.pdf $files"
   fi
   cp *.png $wkdir/$k
   if [ "$?" == 0 ]
   then
    files="*.png $files"
   fi
   cp *.jpg $wkdir/$k
   if [ "$?" == 0 ]
   then
    files="*.jpg $files"
   fi
   cp *.eps $wkdir/$k
   if [ "$?" == 0 ]
   then
    files="*.eps $files"
   fi
   cp *.epsi $wkdir/$k
   if [ "$?" == 0 ]
   then
    files="*.epsi $files"
   fi
   cp *.ps $wkdir/$k
   if [ "$?" == 0 ]
   then
    files="*.ps $files"
   fi
   cp *.clo $wkdir/$k
   cp *.cls $wkdir/$k
   cp *.bst $wkdir/$k
   cp *.sty $wkdir/$k
   if [ "$?" == 0 ]
   then
    files="*.sty $files"
   fi
   cd $wkdir/$k

# Make an empty frame
   cat $i |
   awk ' BEGIN{ 
    bodycut=0
   }
   {
    if ($0=="%szerkbodyend") bodycut=0;
    if (bodycut!=1) print($0);
    if ($0=="%szerkbodystart") {
     bodycut=1
     print("");
     print("");
    };
   }' > 2del_"$i"

# Make a reference frame. This is needed as awk sometimes screws up spec characters so we compare to a reference awking.
   cat $i |
   awk ' {
    print($0)
   }' > 2delref_"$i"

   cmp -s ./2del_"$i" ./2delref_"$i"
   if [ "$?" -ne "0" ]; then
    wehavetest=1
   else
    wehavetest=0
   fi

   if [[ "$pdflatex" == "1" ]]
   then
    pdflatex "$i"
   else
    latex "$i"
   fi
   if [ "$wehavetest" -eq "1" ]
   then
    echo "%!!! This is a temporary file only and will NOT be saved by szerk." | cat - 2del_"$i" > 2deltmp_"$i" && mv 2deltmp_"$i" 2del_"$i" 
    cp 2del_"$i" 2del_orig_"$i"
    if [[ "$pdflatex" == "1" ]]
    then
     pdflatex 2del_"$i"
    else
     latex 2del_"$i"
    fi
   fi
   files="$i $files"
   
   cd -

   if [ -f ".szerklock_$i" ]
   then
    echo Found ".szerklock_$i, skipping $i"
    continue
   else
    touch ".szerklock_$i"
   fi
   if [[ -f "$elej".bbl ]]
   then
    cp "$elej".bbl $wkdir/$k
    files="$elej.bbl $files"

    if [ -f ".szerklock_$elej.bbl" ]
    then
     echo Found ".szerklock_$elej.bbl, skipping $elej.bbl"
     continue
    else
     touch ".szerklock_$elej.bbl"
    fi

    cd $wkdir/$k
    if [ "$wehavetest" -eq "1" ]
    then
     cp "$elej".bbl 2del_"$elej".bbl
    fi
   else
    cd $wkdir/$k
    if grep -q "bibliography{" "$elej".tex; then
     bibtex "$elej".aux
     if [ "$wehavetest" -eq "1" ]
     then
      bibtex 2del_"$elej".aux
     fi
    fi
    if grep -q "addbibresource{" "$elej".tex; then
     biber "$elej"
     if [ "$wehavetest" -eq "1" ]
     then
      biber 2del_"$elej"
     fi
    fi
   fi

   makeindex "$elej"
   if [ "$wehavetest" -eq "1" ]
   then
    makeindex 2del_"$elej"
   fi
  
   if [[ "$pdflatex" == "1" ]]
   then
    pdflatex "$i"
   else
    latex "$i"
   fi
   if [ "$wehavetest" -eq "1" ]
   then
    if [[ "$pdflatex" == "1" ]]
    then
     pdflatex 2del_"$i"
    else
     latex 2del_"$i"
    fi
   fi
  
   if [[ "$pdflatex" == "1" ]]
   then
    pdflatex "$i"
   else
    latex "$i"
   fi
   if [ "$wehavetest" -eq "1" ]
   then
    if [[ "$pdflatex" == "1" ]]
    then
     pdflatex 2del_"$i"
    else
     latex 2del_"$i"
    fi
   fi
  
   if [[ "$pdflatex" == "1" ]]
   then
    pdflatex "$i"
   else
    latex "$i"
   fi
   if [ "$wehavetest" -eq "1" ]
   then
    if [[ "$pdflatex" == "1" ]]
    then
     pdflatex 2del_"$i"
    else
     latex 2del_"$i"
    fi
   fi
   
   #dvipdf "$elej".dvi
   #dvipdfm "$elej".dvi
   if [[ "$pdflatex" != "1" ]]
   then
    dvips "$elej".dvi
    #ps2pdf "$elej".ps
    ps2pdf -dALLOWPSTRANSPARENCY "$elej".ps
   fi
   if [ "$wehavetest" -eq "1" ]
   then
    #dvipdf 2del_"$elej".dvi
    #dvipdfm 2del_"$elej".dvi
    if [[ "$pdflatex" != "1" ]]
    then
     dvips 2del_"$elej".dvi
     #ps2pdf 2del_"$elej".ps
     ps2pdf -dALLOWPSTRANSPARENCY 2del_"$elej".ps
    fi
   fi
  
   cp "$elej".pdf "$elej"_nezd.pdf
   if [ "$wehavetest" -eq "1" ]
   then
    cp 2del_"$elej".pdf 2del_"$elej"_nezd.pdf
   fi
  
   zathura >/dev/null 2>&1 "$elej"_nezd.pdf &
   zathura >/dev/null 2>&1 "$elej".pdf &
   #evince >/dev/null 2>&1 "$elej"_nezd.pdf &
   #xpdf >/dev/null 2>&1 "$elej"_nezd.pdf &
   if [ "$wehavetest" -eq "1" ]
   then
    zathura >/dev/null 2>&1 2del_"$elej"_nezd.pdf &
    #evince >/dev/null 2>&1 2del_"$elej"_nezd.pdf &
    #xpdf >/dev/null 2>&1 2del_"$elej"_nezd.pdf &
   fi
 
   viml="$i $viml"
   if [ "$wehavetest" -eq "1" ]
   then
    viml="2del_$i $viml"
   fi
 
   cd -
  fi
  
 #### zhk
  
  if [[ "$veg" == "zhk" ]]
  then
   cp "$elej.zhk" $wkdir/$k
   cp "$elej.kov" $wkdir/$k
   cp "$elej.knv" $wkdir/$k
   catthatfile "$wkdir/$k" "$i" &
   cd $wkdir/$k
 
   zh "$i"
   
   viml="$i $viml"
   ffl="$elej.html $ffl"
   files="$elej.zhk $files"
   files="$elej.kov $files"
   files="$elej.knv $files"
 
   cd -

   if [ -f ".szerklock_$elej.zhk" ]
   then
    echo Found ".szerklock_$elej.zhk, skipping $elej.zhk"
    continue
   else
    touch ".szerklock_$elej.zhk"
   fi

   if [ -f ".szerklock_$elej.kov" ]
   then
    echo Found ".szerklock_$elej.kov, skipping $elej.kov"
    continue
   else
    touch ".szerklock_$elej.kov"
   fi

   if [ -f ".szerklock_$elej.knv" ]
   then
    echo Found ".szerklock_$elej.knv, skipping $elej.knv"
    continue
   else
    touch ".szerklock_$elej.knv"
   fi

  fi
 done
done

# open everyone in vim, emacs, openoffice and firefox
cd $wkdir/$k
if [ -n "$ool" ]
then
 libreoffice $ool &
 # Libreoffice doesn't play nice with lsof :-(
 libofpid="$!"
fi

if [ -n "$ffl" ]
then
# notice: mybr is a script in your path for launching your favourite browser. Could as well replace by e.g. "firefox" or "chromium-browser".
 mybr $ffl &
fi
if [ -n "$viml" ]
then
 vim -p $viml
fi
if [ -n "$emacsl" ]
then
 emacs $emacsl
fi

# wait till everything closed
# Libreoffice is not playing nice with lsof

if [ -n "$ool" ]
then
 wait "$libofpid"
fi

cd -
l=1
while [ -n "$l" ]; do
 sleep 1
 l=`lsof 2>/dev/null +d $wkdir/$k`
#  echo "$wkdir/$k/$elej.$veg nyitva"
done

# Check changes for text edits
for i in $viml
do
 cmp -s $wkdir/$k/$i ./$i
 if [ "$?" -ne "0" ]; then
  vimdiff -R -M ./$i $wkdir/$k/$i
 fi
done
for i in $emacsl
do
 cmp -s $wkdir/$k/$i ./$i
 if [ "$?" -ne "0" ]; then
  vimdiff -R -M ./$i $wkdir/$k/$i
 fi
done


# Copying back
baj=0
for i in $files
do
 if [[ -f $wkdir/$k/2del_"$i" ]] && [[ -f $wkdir/$k/2del_orig_"$i" ]]
 then
  cmp $wkdir/$k/2del_"$i" $wkdir/$k/2del_orig_"$i"
  if [ "$?" -ne "0" ]
  then
   echo "2del_$i has changed"
   #insteadofless $wkdir/$k/2del_"$i"
   while true
   do
    read -s -p "ARE YOU SURE YOU WANT TO DELETE IT? [sure] " ki
    if [ "$ki" == "sure" ]; then
     break
    else
     vim -p $wkdir/$k/2del_"$i" $wkdir/$k/$i
    fi
   done
  fi
 fi
 cmp -s $wkdir/$k/$i ./$i
 if [ "$?" -ne "0" ]; then
  cp $wkdir/$k/$i .
  if [ "$?" -ne "0" ]
  then
   echo "!!! Problem with $wkdir/$k/$i !!!"
   baj=1
  else
   echo "$wkdir/$k/$i --> $PWD"
  fi
 fi
 while true
 do
  if [ -f ./".szerklock_$i" ]
  then
   echo "Removing .szerklock_$i"
   rm ./".szerklock_$i"
   sleep 1
  else
   break
  fi
 done
done

if [ "$baj" -ne "1" ]
then
 while true
 do
  if [ -d "$wkdir/$k" ]
  then
   echo "Removing $wkdir/$k"
   rm -f -R $wkdir/$k
   sleep 1
  else
   break
  fi
 done
else
 echo "!!! Problem with, $wkdir/$k/ has not been deleted !!!"
fi

